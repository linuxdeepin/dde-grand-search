/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.deepin.dde.daemon.GrandSearch.xml -c DaemonGrandSearchInterface -p daemongrandsearchinterface
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DAEMONGRANDSEARCHINTERFACE_H
#define DAEMONGRANDSEARCHINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.dde.daemon.GrandSearch
 */
class DaemonGrandSearchInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.dde.daemon.GrandSearch"; }
    static inline const char *staticServiceName()
    { return "com.deepin.dde.daemon.GrandSearch"; }
    static inline const char *staticObjectPath()
    { return "/com/deepin/dde/daemon/GrandSearch"; }

public:
    DaemonGrandSearchInterface(QObject *parent = nullptr);

    ~DaemonGrandSearchInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QVariantMap> Configuration()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Configuration"), argumentList);
    }

    inline QDBusPendingReply<bool> Configure(const QVariantMap &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Configure"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> FeedBackStrategy()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("FeedBackStrategy"), argumentList);
    }

    inline QDBusPendingReply<bool> KeepAlive(const QString &session)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(session);
        return asyncCallWithArgumentList(QStringLiteral("KeepAlive"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> MatchedBuffer(const QString &session)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(session);
        return asyncCallWithArgumentList(QStringLiteral("MatchedBuffer"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> MatchedResults(const QString &session)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(session);
        return asyncCallWithArgumentList(QStringLiteral("MatchedResults"), argumentList);
    }

    inline QDBusPendingReply<bool> OpenWithPlugin(const QString &searcher, const QString &item)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(searcher) << QVariant::fromValue(item);
        return asyncCallWithArgumentList(QStringLiteral("OpenWithPlugin"), argumentList);
    }

    inline QDBusPendingReply<bool> Search(const QString &session, const QString &key)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(session) << QVariant::fromValue(key);
        return asyncCallWithArgumentList(QStringLiteral("Search"), argumentList);
    }

    inline QDBusPendingReply<bool> SetFeedBackStrategy(const QVariantMap &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetFeedBackStrategy"), argumentList);
    }

    inline QDBusPendingReply<> Terminate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Terminate"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Matched(const QString &session);
    void SearchCompleted(const QString &session);
};

namespace com {
  namespace deepin {
    namespace dde {
      namespace daemon {
        typedef ::DaemonGrandSearchInterface GrandSearch;
      }
    }
  }
}
#endif
